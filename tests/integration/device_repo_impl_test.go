// Code generated by Jules AI Test Generator. DO NOT EDIT.
package integration

import (
	"context"
	"log"
	"os"
	"path/filepath"
	"testing"
	"time"

	"github.com/google/uuid"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/suite"
	"github.com/testcontainers/testcontainers-go"
	"github.com/testcontainers/testcontainers-go/modules/postgres"
	"github.com/testcontainers/testcontainers-go/wait"
	"github.com/turtacn/cbc/internal/domain/models"
	appPostgres "github.com/turtacn/cbc/internal/infrastructure/persistence/postgres"
	"github.com/turtacn/cbc/pkg/logger"
	gormPostgres "gorm.io/driver/postgres"
	"gorm.io/gorm"
)

type DeviceRepositorySuite struct {
	suite.Suite
	db          *gorm.DB
	repo        *appPostgres.DeviceRepoImpl
	pgContainer *postgres.PostgresContainer
	connString  string
}

func (s *DeviceRepositorySuite) SetupSuite() {
	if os.Getenv("SKIP_DOCKER_TESTS") == "true" {
		s.T().Skip("Skipping Docker-dependent tests")
	}

	ctx := context.Background()
	pgContainer, err := postgres.RunContainer(ctx,
		testcontainers.WithImage("postgres:15-alpine"),
		postgres.WithDatabase("test-db"),
		postgres.WithUsername("user"),
		postgres.WithPassword("password"),
		testcontainers.WithWaitStrategy(
			wait.ForLog("database system is ready to accept connections").
				WithOccurrence(2).
				WithStartupTimeout(5*time.Minute),
		),
	)
	if err != nil {
		log.Fatalf("failed to start postgres container: %s", err)
	}
	s.pgContainer = pgContainer

	connString, err := pgContainer.ConnectionString(ctx, "sslmode=disable")
	assert.NoError(s.T(), err)
	s.connString = connString

	db, err := gorm.Open(gormPostgres.Open(connString), &gorm.Config{})
	assert.NoError(s.T(), err)
	s.db = db

	// Run migrations
	migrationsPath, _ := filepath.Abs("../../migrations/001_init_schema.up.sql")
	sqlBytes, err := os.ReadFile(migrationsPath)
	assert.NoError(s.T(), err)
	err = db.Exec(string(sqlBytes)).Error
	assert.NoError(s.T(), err)

	log := logger.NewDefaultLogger()
	s.repo = appPostgres.NewDeviceRepository(db, log).(*appPostgres.DeviceRepoImpl)
}

func (s *DeviceRepositorySuite) TearDownSuite() {
	if s.pgContainer != nil {
		ctx := context.Background()
		assert.NoError(s.T(), s.pgContainer.Terminate(ctx))
	}
}

func (s *DeviceRepositorySuite) SetupTest() {
	// Clean up tables before each test
	s.db.Exec("TRUNCATE TABLE devices, tenants RESTART IDENTITY CASCADE")
}

func (s *DeviceRepositorySuite) TestSaveAndFindDevice() {
	ctx := context.Background()

	// Create a tenant first, as devices have a foreign key constraint
	tenant := &models.Tenant{TenantID: uuid.New().String()}
	err := s.db.Create(tenant).Error
	assert.NoError(s.T(), err)

	newDevice := &models.Device{
		DeviceID:          uuid.New().String(),
		TenantID:          tenant.TenantID,
		DeviceFingerprint: "fingerprint-123",
	}

	// Save the device
	err = s.repo.Save(ctx, newDevice)
	assert.NoError(s.T(), err)

	// Find the device
	foundDevice, err := s.repo.FindByID(ctx, newDevice.DeviceID)
	assert.NoError(s.T(), err)
	assert.NotNil(s.T(), foundDevice)
	assert.Equal(s.T(), newDevice.DeviceID, foundDevice.DeviceID)
	assert.Equal(s.T(), newDevice.TenantID, foundDevice.TenantID)
	assert.Equal(s.T(), newDevice.DeviceFingerprint, foundDevice.DeviceFingerprint)
}

func (s *DeviceRepositorySuite) TestUpdateDevice() {
	ctx := context.Background()

	// Create a tenant and a device
	tenant := &models.Tenant{TenantID: uuid.New().String()}
	err := s.db.Create(tenant).Error
	assert.NoError(s.T(), err)

	device := &models.Device{
		DeviceID:          uuid.New().String(),
		TenantID:          tenant.TenantID,
		DeviceFingerprint: "fingerprint-456",
	}
	err = s.repo.Save(ctx, device)
	assert.NoError(s.T(), err)

	// Update the device
	device.DeviceFingerprint = "fingerprint-789"
	err = s.repo.Update(ctx, device)
	assert.NoError(s.T(), err)

	// Find and verify the update
	updatedDevice, err := s.repo.FindByID(ctx, device.DeviceID)
	assert.NoError(s.T(), err)
	assert.Equal(s.T(), "fingerprint-789", updatedDevice.DeviceFingerprint)
}

func (s *DeviceRepositorySuite) TestFindDevice_NotFound() {
	ctx := context.Background()
	_, err := s.repo.FindByID(ctx, uuid.New().String())
	assert.Error(s.T(), err)
	// You might want to assert the specific error type here if you have custom errors
}

func TestDeviceRepositorySuite(t *testing.T) {
	suite.Run(t, new(DeviceRepositorySuite))
}
