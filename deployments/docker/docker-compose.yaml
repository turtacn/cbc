# deployments/docker/docker-compose.yml
version: '3.8'

services:
  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: cbc-postgres
    environment:
      POSTGRES_DB: cbc_auth
      POSTGRES_USER: cbc_user
      POSTGRES_PASSWORD: cbc_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cbc_user -d cbc_auth"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - cbc-network

  # Redis cache
  redis:
    image: redis:7-alpine
    container_name: cbc-redis
    command: redis-server --requirepass redis_password
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - cbc-network

  # Authentication service
  auth-service:
    build:
      context: ../../
      dockerfile: deployments/docker/Dockerfile
    container_name: cbc-auth-service
    environment:
      APP_ENV: development
      LOG_LEVEL: debug
      LOG_FORMAT: json

      # Database
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: cbc_auth
      DB_USER: cbc_user
      DB_PASSWORD: cbc_password
      DB_MAX_OPEN_CONNS: 25
      DB_MAX_IDLE_CONNS: 5

      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: redis_password
      REDIS_DB: 0

      # JWT
      JWT_ISSUER: cbc-auth-service
      JWT_ACCESS_TOKEN_EXPIRY: 15m
      JWT_REFRESH_TOKEN_EXPIRY: 720h

      # Server
      SERVER_HTTP_PORT: 8080
      SERVER_GRPC_PORT: 9090
      SERVER_METRICS_PORT: 9091

      # Tracing
      TRACING_ENABLED: true
      TRACING_ENDPOINT: http://jaeger:14268/api/traces
    ports:
      - "8080:8080"
      - "9090:9090"
      - "9091:9091"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "/app/cbc-auth-service", "healthcheck"]
      interval: 30s
      timeout: 5s
      retries: 3
    volumes:
      - ./configs:/app/configs
    networks:
      - cbc-network

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: cbc-jaeger
    environment:
      COLLECTOR_ZIPKIN_HOST_PORT: :9411
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"
      - "14268:14268"
      - "14250:14250"
      - "9411:9411"
    networks:
      - cbc-network

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: cbc-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    ports:
      - "9092:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - cbc-network

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: cbc-grafana
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - cbc-network

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  cbc-network:
    driver: bridge
